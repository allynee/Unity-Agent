Instruction:
Get information about the wall that the user is facing

Code:
private GameObject wallObject;
private Vector3 wallSize;
private Vector3 wallCenter;

public void GetClosestWallInfo()
{
    Vector3D userHeadPosition = GetUsersHeadPosition();
    Vector3D userOrientation = GetUserOrientation();
    Ray userRay = new Ray(userHeadPosition.ToVector3(), userOrientation.ToVector3());
    bool hasHit = false;

    // Get all walls in the scene
    GameObject[] walls = GameObject.FindGameObjectsWithTag("Wall");

    // Determine the wall that the ray intersects
    foreach (WallName wall in Enum.GetValues(typeof(WallName)))
    {
        Vector3D wallPosition = GetWallPosition(wall);
        Plane wallPlane = new Plane(wallPosition.ToVector3(), wallPosition.ToVector3() + Vector3.up, wallPosition.ToVector3() + Vector3.right);

        if (wallPlane.Raycast(userRay, out float distance))
        {
            wallCenter = wallPosition.ToVector3();
            hasHit = true;
            // Find the matching GameObject
            foreach (GameObject wallObj in walls)
            {
                if ((wallObj.transform.position - wallCenter).sqrMagnitude < 0.1f) // Using a small threshold for accuracy
                {
                    // Set the class variables for size of the closest wall
                    wallSize = wallObj.GetComponent<BoxCollider>().size;
                    wallObject = wallObj;
                    Debug.Log($"Wall hit: {wall}, center: {wallCenter}, size: {wallSize}");
                    break; // Exit the loop after finding the wall
                }
            }
            break; // Exit the loop after finding the wall
        }
    }

    if (!hasHit)
    {
        Debug.LogError("No walls in front of user.");
    }
}